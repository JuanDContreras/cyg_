{"ast":null,"code":"import { SIGNUP_SUCCESS, SIGNUP_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, SET_AUTH_LOADING, REMOVE_AUTH_LOADING, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, REFRESH_SUCCESS, REFRESH_FAIL, RESET_PASSWORD_SUCCESS, RESET_PASSWORD_FAIL, RESET_PASSWORD_CONFIRM_SUCCESS, RESET_PASSWORD_CONFIRM_FAIL, LOGOUT } from './types';\nimport { setAlert } from './alert';\nimport axios from 'axios';\nexport const check_authenticated = () => async dispatch => {// //     if(localStorage.getItem('access')){\n  // //         const config = {\n  // //             headers: {\n  // //                 'Accept': 'application/json',\n  // //                 'Content-Type': 'application/json'\n  // //             }\n  // //         };\n  // //         const body = JSON.stringify({\n  // //             token: localStorage.getItem('access')\n  // //         });\n  // //         try {\n  // //             const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n  // //             if (res.status === 200) {\n  // //                 dispatch({\n  // //                     type: AUTHENTICATED_SUCCESS\n  // //                 });\n  // //             } else {\n  // //                 dispatch({\n  // //                     type: AUTHENTICATED_FAIL\n  // //                 });\n  // //             }\n  // //         } catch(err){\n  // //             dispatch({\n  // //                 type: AUTHENTICATED_FAIL\n  // //             });\n  // //         }\n  // //     } else {\n  // //         dispatch({\n  // //             type: AUTHENTICATED_FAIL\n  // //         });\n  // //     }\n};\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    first_name,\n    last_name,\n    email,\n    password,\n    re_password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n    if (res.status === 201) {\n      dispatch({\n        type: SIGNUP_SUCCESS,\n        payload: res.data\n      });\n      dispatch(setAlert('Te enviamos un correo, por favor activa tu cuenta. Revisa el correo de spam', 'green'));\n    } else {\n      dispatch({\n        type: SIGNUP_FAIL\n      });\n      dispatch(setAlert('Error al crear cuenta', 'red'));\n    }\n\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n  } catch (err) {\n    dispatch({\n      type: SIGNUP_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error conectando con el servidor, intenta mas tarde.', 'red'));\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem('access')) {\n    const config = {\n      headers: {\n        'Authorization': `JWT ${localStorage.getItem('access')}`,\n        'Accept': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n\n      if (res.status === 200) {\n        dispatch({\n          type: USER_LOADED_SUCCESS,\n          payload: res.data\n        });\n      } else {\n        dispatch({\n          type: USER_LOADED_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: USER_LOADED_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const login = (email, password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n\n    if (res.status === 200) {\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n      dispatch(load_user());\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Inicio de sesión con éxito', 'green'));\n    } else {\n      dispatch({\n        type: LOGIN_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error al iniciar sesion.', 'red'));\n    }\n  } catch (err) {\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error al iniciar sesion. Intenta mas tarde', 'red'));\n  }\n};\nexport const activate = (uid, token) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n\n    if (res.status === 204) {\n      dispatch({\n        type: ACTIVATION_SUCCESS\n      });\n      dispatch(setAlert('Cuenta activada correctamente', 'green'));\n    } else {\n      dispatch({\n        type: ACTIVATION_FAIL\n      });\n      dispatch(setAlert('Error activando cuenta', 'red'));\n    }\n\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n  } catch (err) {\n    dispatch({\n      type: ACTIVATION_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error al conectar con el servidor, intenta mas tarde.', 'red'));\n  }\n};\nexport const refresh = () => async dispatch => {\n  if (localStorage.getItem('refresh')) {\n    const config = {\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      refresh: localStorage.getItem('refresh')\n    });\n\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/refresh/`, body, config);\n\n      if (res.status === 200) {\n        dispatch({\n          type: REFRESH_SUCCESS,\n          payload: res.data\n        });\n      } else {\n        dispatch({\n          type: REFRESH_FAIL\n        });\n      }\n    } catch (err) {\n      dispatch({\n        type: REFRESH_FAIL\n      });\n    }\n  } else {\n    dispatch({\n      type: REFRESH_FAIL\n    });\n  }\n};\nexport const reset_password = email => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n\n    if (res.status === 204) {\n      dispatch({\n        type: RESET_PASSWORD_SUCCESS\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Password reset email sent', 'green'));\n    } else {\n      dispatch({\n        type: RESET_PASSWORD_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error sending password reset email', 'red'));\n    }\n  } catch (err) {\n    dispatch({\n      type: RESET_PASSWORD_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Error sending password reset email', 'red'));\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  dispatch({\n    type: SET_AUTH_LOADING\n  });\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n\n  if (new_password !== re_new_password) {\n    dispatch({\n      type: RESET_PASSWORD_CONFIRM_FAIL\n    });\n    dispatch({\n      type: REMOVE_AUTH_LOADING\n    });\n    dispatch(setAlert('Passwords do not match', 'red'));\n  } else {\n    try {\n      const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n\n      if (res.status === 204) {\n        dispatch({\n          type: RESET_PASSWORD_CONFIRM_SUCCESS\n        });\n        dispatch({\n          type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Password has been reset successfully', 'green'));\n      } else {\n        dispatch({\n          type: RESET_PASSWORD_CONFIRM_FAIL\n        });\n        dispatch({\n          type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Error resetting your password', 'red'));\n      }\n    } catch (err) {\n      dispatch({\n        type: RESET_PASSWORD_CONFIRM_FAIL\n      });\n      dispatch({\n        type: REMOVE_AUTH_LOADING\n      });\n      dispatch(setAlert('Error resetting your password', 'red'));\n    }\n  }\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch(setAlert('Succesfully logged out', 'green'));\n};","map":{"version":3,"sources":["C:/Users/JuanD/JuanD/respaldo002/cyg/src/redux/actions/auth.js"],"names":["SIGNUP_SUCCESS","SIGNUP_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","SET_AUTH_LOADING","REMOVE_AUTH_LOADING","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","REFRESH_SUCCESS","REFRESH_FAIL","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAIL","RESET_PASSWORD_CONFIRM_SUCCESS","RESET_PASSWORD_CONFIRM_FAIL","LOGOUT","setAlert","axios","check_authenticated","dispatch","signup","first_name","last_name","email","password","re_password","type","config","headers","body","JSON","stringify","res","post","process","env","REACT_APP_API_URL","status","payload","data","err","load_user","localStorage","getItem","get","login","activate","uid","token","refresh","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"mappings":"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","sourcesContent":["import {\n    SIGNUP_SUCCESS,\n    SIGNUP_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    ACTIVATION_SUCCESS,\n    ACTIVATION_FAIL,\n    SET_AUTH_LOADING,\n    REMOVE_AUTH_LOADING,\n    USER_LOADED_SUCCESS,\n    USER_LOADED_FAIL,\n    AUTHENTICATED_SUCCESS,\n    AUTHENTICATED_FAIL,\n    REFRESH_SUCCESS,\n    REFRESH_FAIL,\n    RESET_PASSWORD_SUCCESS,\n    RESET_PASSWORD_FAIL,\n    RESET_PASSWORD_CONFIRM_SUCCESS,\n    RESET_PASSWORD_CONFIRM_FAIL,\n    LOGOUT\n} from './types'\nimport { setAlert } from './alert';\nimport axios from 'axios'\n\nexport const check_authenticated = () => async dispatch => {\n// //     if(localStorage.getItem('access')){\n// //         const config = {\n// //             headers: {\n// //                 'Accept': 'application/json',\n// //                 'Content-Type': 'application/json'\n// //             }\n// //         };\n\n// //         const body = JSON.stringify({\n// //             token: localStorage.getItem('access')\n// //         });\n\n// //         try {\n// //             const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config);\n\n// //             if (res.status === 200) {\n// //                 dispatch({\n// //                     type: AUTHENTICATED_SUCCESS\n// //                 });\n// //             } else {\n// //                 dispatch({\n// //                     type: AUTHENTICATED_FAIL\n// //                 });\n// //             }\n// //         } catch(err){\n// //             dispatch({\n// //                 type: AUTHENTICATED_FAIL\n// //             });\n// //         }\n// //     } else {\n// //         dispatch({\n// //             type: AUTHENTICATED_FAIL\n// //         });\n// //     }\n}\n\nexport const signup = (first_name, last_name, email, password, re_password) => async dispatch => {\n    dispatch({\n        type: SET_AUTH_LOADING\n    });\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({\n        first_name,\n        last_name,\n        email,\n        password,\n        re_password\n    });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config);\n\n        if (res.status === 201) {\n            dispatch({\n                type: SIGNUP_SUCCESS,\n                payload: res.data\n            });\n            dispatch(setAlert('Te enviamos un correo, por favor activa tu cuenta. Revisa el correo de spam','green'))\n        } else {\n            dispatch({\n                type: SIGNUP_FAIL\n            });\n            dispatch(setAlert('Error al crear cuenta', 'red'));\n        }\n        dispatch({\n            type: REMOVE_AUTH_LOADING\n        });\n    } catch (err) {\n        dispatch({\n            type: SIGNUP_FAIL\n        });\n        dispatch({\n            type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Error conectando con el servidor, intenta mas tarde.', 'red'));\n    }\n};\n\nexport const load_user = () => async dispatch => {\n    if(localStorage.getItem('access')){\n        const config = {\n            headers: {\n                'Authorization': `JWT ${localStorage.getItem('access')}`,\n                'Accept': 'application/json'\n            }\n        };\n\n        try {\n            const res = await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config);\n        \n            if (res.status === 200) {\n                dispatch({\n                    type: USER_LOADED_SUCCESS,\n                    payload: res.data\n                });\n            } else {\n                dispatch({\n                    type: USER_LOADED_FAIL\n                });\n            }\n        }\n        catch(err){\n            dispatch({\n                type: USER_LOADED_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: USER_LOADED_FAIL\n        });\n    }\n}\n\nexport const login = (email, password) => async dispatch => {\n    dispatch({\n        type: SET_AUTH_LOADING\n    });\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({\n        email,\n        password\n    });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config);\n    \n        if (res.status === 200) {\n            dispatch({\n                type: LOGIN_SUCCESS,\n                payload: res.data\n            });\n            dispatch(load_user());\n            dispatch({\n                type: REMOVE_AUTH_LOADING\n            });\n            dispatch(setAlert('Inicio de sesión con éxito', 'green'));\n        } else {\n            dispatch({\n                type: LOGIN_FAIL\n            });\n            dispatch({\n                type: REMOVE_AUTH_LOADING\n            });\n            dispatch(setAlert('Error al iniciar sesion.', 'red'));\n        }\n    }\n    catch(err){\n        dispatch({\n            type: LOGIN_FAIL\n        });\n        dispatch({\n            type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Error al iniciar sesion. Intenta mas tarde', 'red'));\n    }\n}\n\nexport const activate = (uid, token) => async dispatch => {\n    dispatch({\n        type: SET_AUTH_LOADING\n    });\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({\n        uid,\n        token\n    });\n\n    try {\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config);\n    \n        if (res.status === 204) {\n            dispatch({\n                type: ACTIVATION_SUCCESS\n            });\n            dispatch(setAlert('Cuenta activada correctamente', 'green'));\n        } else {\n            dispatch({\n                type: ACTIVATION_FAIL\n            });\n            dispatch(setAlert('Error activando cuenta', 'red'));\n        }\n        dispatch({\n            type: REMOVE_AUTH_LOADING\n        });\n    }\n    catch(err){\n        dispatch({\n            type: ACTIVATION_FAIL\n        });\n        dispatch({\n            type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Error al conectar con el servidor, intenta mas tarde.', 'red'));\n    }\n};\n\nexport const refresh = () => async dispatch => {\n    if (localStorage.getItem('refresh')) {\n        const config = {\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            }\n        };\n\n        const body = JSON.stringify({\n            refresh: localStorage.getItem('refresh')\n        });\n\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/refresh/`, body, config);\n            \n            if (res.status === 200) {\n                dispatch({\n                    type: REFRESH_SUCCESS,\n                    payload: res.data\n                });\n            } else {\n                dispatch({\n                    type: REFRESH_FAIL\n                });\n            }\n        }catch(err){\n            dispatch({\n                type: REFRESH_FAIL\n            });\n        }\n    } else {\n        dispatch({\n            type: REFRESH_FAIL\n        });\n    }\n}\n\nexport const reset_password = (email) => async dispatch => {\n    dispatch({\n        type: SET_AUTH_LOADING\n    });\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({ email });\n\n    try{\n        const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config);\n        \n        if (res.status === 204) {\n            dispatch({\n                type: RESET_PASSWORD_SUCCESS\n            });\n            dispatch({\n                type: REMOVE_AUTH_LOADING\n            });\n            dispatch(setAlert('Password reset email sent', 'green'));\n        } else {\n            dispatch({\n                type: RESET_PASSWORD_FAIL\n            });\n            dispatch({\n                type: REMOVE_AUTH_LOADING\n            });\n            dispatch(setAlert('Error sending password reset email', 'red'));\n        }\n    }\n    catch(err){\n        dispatch({\n            type: RESET_PASSWORD_FAIL\n        });\n        dispatch({\n            type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Error sending password reset email', 'red'));\n    }\n}\n\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n    dispatch({\n        type: SET_AUTH_LOADING\n    });\n\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    };\n\n    const body = JSON.stringify({\n        uid,\n        token,\n        new_password,\n        re_new_password\n    });\n\n    if (new_password !== re_new_password) {\n        dispatch({\n            type: RESET_PASSWORD_CONFIRM_FAIL\n        });\n        dispatch({\n            type: REMOVE_AUTH_LOADING\n        });\n        dispatch(setAlert('Passwords do not match', 'red'));\n    } else {\n        try {\n            const res = await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config);\n        \n            if (res.status === 204) {\n                dispatch({\n                    type: RESET_PASSWORD_CONFIRM_SUCCESS\n                });\n                dispatch({\n                    type: REMOVE_AUTH_LOADING\n                });\n                dispatch(setAlert('Password has been reset successfully', 'green'));\n            } else {\n                dispatch({\n                    type: RESET_PASSWORD_CONFIRM_FAIL\n                });\n                dispatch({\n                    type: REMOVE_AUTH_LOADING\n                });\n                dispatch(setAlert('Error resetting your password', 'red'));\n            }\n        } catch(err){\n            dispatch({\n                type: RESET_PASSWORD_CONFIRM_FAIL\n            });\n            dispatch({\n                type: REMOVE_AUTH_LOADING\n            });\n            dispatch(setAlert('Error resetting your password', 'red'));\n        }\n    }\n}\n\nexport const logout = () => dispatch => {\n    dispatch({\n        type: LOGOUT\n    });\n    dispatch(setAlert('Succesfully logged out', 'green'));\n}"]},"metadata":{},"sourceType":"module"}